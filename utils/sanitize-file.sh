#!/bin/bash

# Function to print messages in color
print_color() {
  color=$1
  message=$2
  echo -e "\033[${color}m${message}\033[0m"
}

# Function to display an error message and exit
exit_with_error() {
  print_color "31" "❌ $1"
  exit 1
}

# Display warning banner with red background and white text
echo -e "\033[41;37m╔════════════════════════ WARNING ═══════════════════╗\033[0m"
echo -e "\033[41;37m║                                                    ║\033[0m"
echo -e "\033[41;37m║  This script will permanently remove the specified ║\033[0m"
echo -e "\033[41;37m║  file from the entire Git history. This action     ║\033[0m"
echo -e "\033[41;37m║  cannot be undone and will rewrite the repository  ║\033[0m"
echo -e "\033[41;37m║  history.                                          ║\033[0m"
echo -e "\033[41;37m║                                                    ║\033[0m"
echo -e "\033[41;37m╚════════════════════════════════════════════════════╝\033[0m"

# Check if the file path was provided as a parameter
if [ -z "$1" ]; then
  # Prompt the user to enter the path of the file to be removed
  read -p "Please enter the path of the file to be removed: " FILE_PATH
else
  FILE_PATH="$1"
fi

# Verify if the file path is not empty
if [ -z "$FILE_PATH" ]; then
  exit_with_error "Please specify the path of the file to be removed."
fi

# Check if file exists in the repository
if [ ! -f "$FILE_PATH" ]; then
  exit_with_error "File '$FILE_PATH' does not exist in the repository."
fi

# Show confirmation with file path
echo -e "\nFile to be removed: $FILE_PATH"
read -p "Are you sure you want to proceed? (y/N): " confirm
if [[ ! "$confirm" =~ ^[yY]$ ]]; then
  exit_with_error "Operation cancelled by user."
fi

# Ensure the repository directory is correct
REPO_DIR="$(git rev-parse --show-toplevel)"
if [ -z "$REPO_DIR" ]; then
  exit_with_error "Failed to locate the root directory of the repository."
fi

cd $REPO_DIR || exit_with_error "Failed to enter the repository root directory."

# Remove all instances of the file from the Git history
print_color "33" "🚧 Removing file from Git history..."
git filter-branch --force --index-filter \
  "git rm --cached --ignore-unmatch $FILE_PATH" \
  --prune-empty --tag-name-filter cat -- --all || exit_with_error "Failed to remove the file from Git history."

# Clean temporary files generated by git filter-branch
print_color "33" "🚧 Cleaning up temporary files..."
rm -rf .git/refs/original/
git reflog expire --expire=now --all
git gc --prune=now
git gc --aggressive --prune=now

# Force push changes to the remote repository
print_color "33" "🚧 Forcing push to remote repository..."
git push origin --force --all || exit_with_error "Failed to push changes to the remote repository."
git push origin --force --tags || exit_with_error "Failed to push tags to the remote repository."

# Confirm the file has been completely removed
print_color "32" "✅ File $FILE_PATH has been successfully removed from all commits."
