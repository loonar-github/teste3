name: Code Validation

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - 'v*'
    paths:
      - 'src/**'
  pull_request:
    branches:
      - '*'
    paths:
      - 'src/**'

jobs:
  check-dependency:
    runs-on: ubuntu-24.04
    env:
      SOURCE_PAT: ${{ secrets.SOURCE_PAT }}
    steps:
      - name: Check and wait for publish-validation-image workflow
        uses: actions/github-script@v7
        id: check-workflow
        with:
          script: |
            const MAX_WAIT_MINUTES = 30;
            const POLLING_INTERVAL_SECONDS = 30;
            const startTime = new Date();
            
            async function getLatestWorkflowRun() {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: 'loonar-git',
                repo: 'loonar-morpheus-template',
                workflow_id: 'publish-validation-image.yml',
                per_page: 1
              });
              return runs.workflow_runs[0];
            }
            
            let lastRun = await getLatestWorkflowRun();
            if (!lastRun) {
              throw new Error('Nenhuma execução do workflow publish-validation-image encontrada');
            }
            
            // Aguarda se houver uma execução em andamento
            while (lastRun.status === 'in_progress' || lastRun.status === 'queued') {
              const elapsedMinutes = (new Date() - startTime) / 1000 / 60;
              if (elapsedMinutes > MAX_WAIT_MINUTES) {
                throw new Error(`Timeout: Workflow publish-validation-image ainda em execução após ${MAX_WAIT_MINUTES} minutos`);
              }
              
              console.log(`Workflow publish-validation-image ainda em execução. Aguardando ${POLLING_INTERVAL_SECONDS} segundos...`);
              await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL_SECONDS * 1000));
              lastRun = await getLatestWorkflowRun();
            }
            
            console.log('Workflow publish-validation-image concluído. Continuando...');

  validate:
    needs: check-dependency
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/loonar-git/loonar-morpheus-template:latest
      credentials:
         username: "loonar-git"
         password: ${{ secrets.SOURCE_PAT }}
    env:
      SOURCE_PAT: ${{ secrets.SOURCE_PAT }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Para Pull Requests, compare com o branch base
          echo "py_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "sh_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.sh$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "tf_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.tf$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
        else
          # Para pushes diretos, compare com o commit anterior
          echo "py_files=$(git diff --name-only HEAD^ HEAD | grep '\.py$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "sh_files=$(git diff --name-only HEAD^ HEAD | grep '\.sh$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "tf_files=$(git diff --name-only HEAD^ HEAD | grep '\.tf$' | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Run Bash linter
      if: steps.changed-files.outputs.sh_files != ''
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.sh_files }}"
        if [ ! -z "$CHANGED_FILES" ]; then
          shellcheck $CHANGED_FILES
        fi

    - name: Run Terraform fmt
      if: steps.changed-files.outputs.tf_files != ''
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.tf_files }}"
        if [ ! -z "$CHANGED_FILES" ]; then
          terraform fmt -check $CHANGED_FILES
        fi

    - name: Run Terraform validate
      if: steps.changed-files.outputs.tf_files != ''
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.tf_files }}"
        if [ ! -z "$CHANGED_FILES" ]; then
          # Terraform validate precisa do diretório completo
          unique_dirs=$(dirname $CHANGED_FILES | sort -u)
          for dir in $unique_dirs; do
            terraform -chdir=$dir validate
          done
        fi

    - name: Run tfsec to check for security issues
      if: steps.changed-files.outputs.tf_files != ''
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.tf_files }}"
        if [ ! -z "$CHANGED_FILES" ]; then
          # tfsec precisa do diretório completo
          unique_dirs=$(dirname $CHANGED_FILES | sort -u)
          for dir in $unique_dirs; do
            tfsec $dir
          done
        fi

    - name: Run Python style checker (flake8)
      if: steps.changed-files.outputs.py_files != ''
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.py_files }}"
        if [ ! -z "$CHANGED_FILES" ]; then
          flake8 $CHANGED_FILES
        fi

    - name: Run Python tests
      if: steps.changed-files.outputs.py_files != ''
      run: |
        CHANGED_FILES="${{ steps.changed-files.outputs.py_files }}"
        if [ ! -z "$CHANGED_FILES" ]; then
          pytest $CHANGED_FILES
        fi